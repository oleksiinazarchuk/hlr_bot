import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "tg.api" 
PHP_SERVER_URL = "url"  

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
FIELDS_MAPPING_HLR = {
    "msisdn": "–ù–æ–º–µ—Ä",
    "connectivity_status": "–°—Ç–∞—Ç—É—Å",
    "original_network_name": "–û–ø–µ—Ä–∞—Ç–æ—Ä",
    "original_country_name": "–°—Ç—Ä–∞–Ω–∞",
    "original_country_code": "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã",
    "processing_status": "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"
}

FIELDS_MAPPING_NT = {
    "number": "–ù–æ–º–µ—Ä",
    "number_type": "–¢–∏–ø –Ω–æ–º–µ—Ä–∞",
    "query_status": "–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞",
    "is_valid": "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π",
    "invalid_reason": "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "is_possibly_ported": "–í–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω",
    "is_vanity_number": "–ü—Ä—è–º–æ–π –Ω–æ–º–µ—Ä",
    "original_network_name": "–û–ø–µ—Ä–∞—Ç–æ—Ä",
    "original_country_name": "–°—Ç—Ä–∞–Ω–∞",
    "original_country_code": "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã",
    "regions": "–†–µ–≥–∏–æ–Ω",
    "timezones": "–ß–∞—Å–æ–≤–∞—è –∑–æ–Ω–∞",
    "info_text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å PHP-—Å–∫—Ä–∏–ø—Ç–æ–º
def make_request(phone_number, action):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ PHP-—Å–∫—Ä–∏–ø—Ç—É
        url = f"{PHP_SERVER_URL}?action={action}"
        headers = {"Content-Type": "application/json"}
        data = {"msisdn" if action == "hlr-lookup" else "number": phone_number}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, json=data, headers=headers)

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"HTTP {response.status_code}: {response.text}"}
    except requests.RequestException as e:
        return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.reply(
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +491731972326), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
@dp.message()
async def handle_message(message: types.Message):
    phone_number = message.text.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º "+" –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not phone_number.startswith("+"):
        if phone_number.isdigit():
            phone_number = f"+{phone_number}"
        else:
            await message.reply("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return

    await message.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–º–µ—Ä...")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å HLR
    hlr_result = make_request(phone_number, "hlr-lookup")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å NT
    nt_result = make_request(phone_number, "nt-lookup")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã HLR
    if "error" in hlr_result:
        hlr_response_text = f"‚ùå –û—à–∏–±–∫–∞ HLR: {hlr_result['error']}"
    else:
        hlr_filtered = {FIELDS_MAPPING_HLR[key]: value for key, value in hlr_result.items() if key in FIELDS_MAPPING_HLR}
        hlr_response_text = "üìû –†–µ–∑—É–ª—å—Ç–∞—Ç—ã HLR:\n" + "\n".join([f"{key}: {value}" for key, value in hlr_filtered.items()])

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã NT
    if "error" in nt_result:
        nt_response_text = f"‚ùå –û—à–∏–±–∫–∞ NT: {nt_result['error']}"
    else:
        nt_filtered = {}
        for key, value in nt_result.items():
            if key in FIELDS_MAPPING_NT and key != "info_text":
                if isinstance(value, bool):
                    value = "–î–∞" if value else "–ù–µ—Ç"
                if isinstance(value, list):
                    value = ", ".join(value)
                value = value if value not in (None, "", "null") else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                nt_filtered[FIELDS_MAPPING_NT[key]] = value

        nt_response_text = "üìû –†–µ–∑—É–ª—å—Ç–∞—Ç—ã NT:\n" + "\n".join([f"{key}: {value}" for key, value in nt_filtered.items()])

    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    analysis_text = "üìä –ê–Ω–∞–ª–∏–∑:\n"
    try:
        hlr_status = hlr_result.get("connectivity_status", "UNDETERMINED")
        number_type = nt_result.get("number_type", "UNKNOWN")

        if hlr_status == "INVALID_MSISDN":
            analysis_text += "‚ùå –ù–æ–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (invalid).\n"
        elif hlr_status == "UNDETERMINED":
            analysis_text += "‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω.\n"
        elif hlr_status == "CONNECTED":
            if number_type == "MOBILE":
                analysis_text += "‚úÖ –ù–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π, –º–æ–±–∏–ª—å–Ω—ã–π, –¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            elif number_type == "PAGER":
                analysis_text += "‚ö†Ô∏è –ù–æ–º–µ—Ä –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π (pager).\n"
            else:
                analysis_text += f"‚ö†Ô∏è –ù–æ–º–µ—Ä —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–æ–º: {number_type}.\n"
    except Exception as e:
        analysis_text += f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}.\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑
    await message.reply(f"{hlr_response_text}\n\n{nt_response_text}\n\n{analysis_text}")




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
